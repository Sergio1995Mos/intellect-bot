import json
import random
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ParseMode
from aiogram.dispatcher.filters import Command
from aiogram.utils.executor import start_webhook
from datetime import datetime, timedelta
import asyncio

API_TOKEN = 'YOUR_BOT_TOKEN_HERE'  # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
RESPONSES_FILE = "responses.json"

# –¢–µ–º–∞—Ç–∏–∫–∏ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
scenarios = [
    {"topic": "–ë–∏–∑–Ω–µ—Å", "difficulty": "üü° –°—Ä–µ–¥–Ω–∏–π", "situation": "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–∫–æ–π –∂–µ –ø—Ä–æ–¥—É–∫—Ç, –∫–∞–∫ —É —Ç–µ–±—è, –Ω–æ –Ω–∞ 30% –¥–µ—à–µ–≤–ª–µ."},
    {"topic": "–ü–æ–ª–∏—Ç–∏–∫–∞", "difficulty": "üî¥ –°–ª–æ–∂–Ω—ã–π", "situation": "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —É—Ö–æ–¥–∏—Ç –≤ –æ—Ç—Å—Ç–∞–≤–∫—É. –ß–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞ ‚Äî –≤—ã–±–æ—Ä—ã."},
    {"topic": "–°–ø–æ—Ä—Ç", "difficulty": "üü¢ –õ—ë–≥–∫–∏–π", "situation": "–¢–≤–æ—è –ª—é–±–∏–º–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª. –¢—ã ‚Äî —Ç—Ä–µ–Ω–µ—Ä. –ß—Ç–æ –¥–µ–ª–∞–µ—à—å –¥–∞–ª—å—à–µ?"},
    {"topic": "–ñ–∏–∑–Ω—å", "difficulty": "üü¢ –õ—ë–≥–∫–∏–π", "situation": "–¢—ã —Ä–µ—à–∞–µ—à—å –ø–µ—Ä–µ–µ—Ö–∞—Ç—å –≤ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –±–µ–∑ —á—ë—Ç–∫–æ–≥–æ –ø–ª–∞–Ω–∞."},
    {"topic": "–≠–∫–æ–Ω–æ–º–∏–∫–∞", "difficulty": "üî¥ –°–ª–æ–∂–Ω—ã–π", "situation": "–¶–µ–Ω—ã –Ω–∞ –Ω–µ—Ñ—Ç—å —Ä–µ–∑–∫–æ –ø–∞–¥–∞—é—Ç –¥–æ –º–∏–Ω–∏–º—É–º–∞ –∑–∞ 10 –ª–µ—Ç. –¢—ã ‚Äî –º–∏–Ω–∏—Å—Ç—Ä —ç–∫–æ–Ω–æ–º–∏–∫–∏."},
    {"topic": "–ö–æ–Ω—Ñ–ª–∏–∫—Ç", "difficulty": "üü° –°—Ä–µ–¥–Ω–∏–π", "situation": "–ü–∞—Ä—Ç–Ω—ë—Ä –ø–æ –±–∏–∑–Ω–µ—Å—É —Ö–æ—á–µ—Ç –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞, —É–≥—Ä–æ–∂–∞—è —Å—É–¥–æ–º."},
    {"topic": "–ù–æ–≤–æ—Å—Ç–∏", "difficulty": "üü° –°—Ä–µ–¥–Ω–∏–π", "situation": "–°–æ—Ü—Å–µ—Ç–∏ –º–∞—Å—Å–æ–≤–æ –±–ª–æ–∫–∏—Ä—É—é—Ç –∞–∫–∫–∞—É–Ω—Ç—ã, –≤–∫–ª—é—á–∞—è —Ç–≤–æ–π. –¢—ã ‚Äî –ø—É–±–ª–∏—á–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å."}
]

# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–≤–µ—Ç—ã
try:
    with open(RESPONSES_FILE, "r") as f:
        responses = json.load(f)
except FileNotFoundError:
    responses = {}

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è. –ù–∞–ø–∏—à–∏ /brainboost, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

@dp.message_handler(commands=["brainboost"])
async def daily_challenge(message: types.Message):
    scenario = random.choice(scenarios)
    text = f"üß† <b>–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç-–¥–µ–Ω—å</b>
"            f"üìö –¢–µ–º–∞: <b>{scenario['topic']}</b>
"            f"üî• –°–ª–æ–∂–Ω–æ—Å—Ç—å: <b>{scenario['difficulty']}</b>

"            f"‚ú® –°–∏—Ç—É–∞—Ü–∏—è:
<blockquote>{scenario['situation']}</blockquote>

"            f"‚ñ∂Ô∏è –ü—Ä–∏–¥—É–º–∞–π 3 —Å—Ü–µ–Ω–∞—Ä–∏—è (–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π, –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π, –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π) –ø–æ 3 —à–∞–≥–∞. –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: /–æ—Ç–≤–µ—Ç"
    await message.reply(text, parse_mode=ParseMode.HTML)

@dp.message_handler(Command("–æ—Ç–≤–µ—Ç"))
async def save_response(message: types.Message):
    user_id = str(message.from_user.id)
    user_response = message.get_args()
    if not user_response:
        await message.reply("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /–æ—Ç–≤–µ—Ç")
        return
    if user_id not in responses:
        responses[user_id] = []
    responses[user_id].append({
        "date": datetime.now().strftime("%Y-%m-%d %H:%M"),
        "response": user_response
    })
    with open(RESPONSES_FILE, "w") as f:
        json.dump(responses, f, indent=2, ensure_ascii=False)
    await message.reply("–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω! üìù")

@dp.message_handler(commands=["–º–æ–∏–º—ã—à–ª–µ–Ω–∏—è"])
async def show_responses(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in responses or not responses[user_id]:
        await message.reply("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.")
        return
    text = "üìù <b>–¢–≤–æ–∏ –ø—Ä–æ—à–ª—ã–µ –æ—Ç–≤–µ—Ç—ã:</b>
"
    for entry in responses[user_id][-5:]:  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
        text += f"
<b>{entry['date']}</b>
{entry['response']}
"
    await message.reply(text, parse_mode=ParseMode.HTML)

# –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ (–µ—Å–ª–∏ —Ö–æ—Å—Ç–∏–Ω–≥ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç background tasks)
async def scheduled_challenge():
    await bot.wait_until_ready()
    while True:
        now = datetime.now()
        if now.hour == 10 and now.minute == 0:
            scenario = random.choice(scenarios)
            text = f"üß† <b>–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç-–¥–µ–Ω—å</b>
"                    f"üìö –¢–µ–º–∞: <b>{scenario['topic']}</b>
"                    f"üî• –°–ª–æ–∂–Ω–æ—Å—Ç—å: <b>{scenario['difficulty']}</b>

"                    f"‚ú® –°–∏—Ç—É–∞—Ü–∏—è:
<blockquote>{scenario['situation']}</blockquote>

"                    f"‚ñ∂Ô∏è –ü—Ä–∏–¥—É–º–∞–π 3 —Å—Ü–µ–Ω–∞—Ä–∏—è (–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π, –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π, –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π) –ø–æ 3 —à–∞–≥–∞. –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: /–æ—Ç–≤–µ—Ç"
            for user_id in responses.keys():
                try:
                    await bot.send_message(chat_id=user_id, text=text, parse_mode=ParseMode.HTML)
                except:
                    continue
        await asyncio.sleep(60)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    # loop.create_task(scheduled_challenge())  # –í–∫–ª—é—á–∏—Ç—å, –µ—Å–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    executor.start_polling(dp, skip_updates=True)
